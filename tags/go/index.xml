<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>go - 标签 - Yusank`s Site</title><link>https://yusank.github.io/tags/go/</link><description>go - 标签 - Yusank`s Site</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yusankuban@gmail.com (Yusank)</managingEditor><webMaster>yusankuban@gmail.com (Yusank)</webMaster><lastBuildDate>Wed, 03 Nov 2021 12:20:00 +0800</lastBuildDate><atom:link href="https://yusank.github.io/tags/go/" rel="self" type="application/rss+xml"/><item><title>apisix 开发自定义插件</title><link>https://yusank.github.io/apisix_plugins/</link><pubDate>Wed, 03 Nov 2021 12:20:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/apisix_plugins/</guid><description>分享如何在 docker 环境部署 apisix 和如何开发 lua 和 go 语言的插件以及如何使用这些自定义插件的过程</description></item><item><title>如何在 docker 环境下进行远程 dlv 调试</title><link>https://yusank.github.io/docker-dlv-debugging/</link><pubDate>Mon, 06 Sep 2021 14:02:03 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/docker-dlv-debugging/</guid><description>dlv 作为程序调试工具功能非常强大，日常开发和测试中几乎离不开 debug 调试。但是有的时候由</description></item><item><title>如何自定义 protoc 插件</title><link>https://yusank.github.io/go-protoc-http/</link><pubDate>Thu, 08 Jul 2021 18:22:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-protoc-http/</guid><description>前言 如果大家接触过 grpc 和 protobuf ，那对 protoc 这个命令应该不陌生。 protoc 为基于 proto buffer 文件生成不同语言</description></item><item><title>如何编写自己的第一个命令行工具</title><link>https://yusank.github.io/go-cobra/</link><pubDate>Wed, 30 Jun 2021 18:22:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-cobra/</guid><description>关于如何用 go 语言编写一个命令行工具。这里会基于 cobra 开源库进行开发。cobra 作为一</description></item><item><title>Go-Micro 中使用Nacos</title><link>https://yusank.github.io/use-nacos-with-go-micro/</link><pubDate>Wed, 23 Jun 2021 18:22:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/use-nacos-with-go-micro/</guid><description>go-micro 作为比较流行的微服务框架，其良好的接口设计为后期扩展使用带来了非常好的便利性。</description></item><item><title>Go-Micro 的架构及其使用（一）</title><link>https://yusank.github.io/go-micro-1/</link><pubDate>Fri, 11 Jun 2021 18:22:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-micro-1/</guid><description>关于如何使用go的微服务框架 go-micro/v3 的使用和其插件的自定义。第一部分将框架的架构大致了</description></item><item><title>Go 语言开发及常用库的使用规范(语言篇)</title><link>https://yusank.github.io/go-standard/</link><pubDate>Wed, 25 Nov 2020 16:24:41 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-standard/</guid><description>语言篇，提出常见的开发上的不好的、不规范的写法，并给出更好的写法。 Uber 是一家美国硅</description></item><item><title>Go Map 源码解读</title><link>https://yusank.github.io/go-map/</link><pubDate>Sun, 14 Jun 2020 16:24:41 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-map/</guid><description>Go 的 map 作为该语言最常见的基础数据结构之一。 源码解读 Go 语言实现的 map 并非是完全的哈希</description></item><item><title>Go Channel 源码解读</title><link>https://yusank.github.io/go-channel/</link><pubDate>Fri, 06 Mar 2020 17:24:41 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-channel/</guid><description>Go 的 channel 作为该语言很重要的特性，作为一个 gopher 有必要详细了解其实现原理。 原理解读 Go 语言</description></item><item><title>Go Image</title><link>https://yusank.github.io/go-image/</link><pubDate>Tue, 22 Aug 2017 12:20:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/go-image/</guid><description>用 GO 实现图片处理和文字合成 Go 的图片处理 最近需要一个合成明信片的工具，即往背景图的</description></item></channel></rss>