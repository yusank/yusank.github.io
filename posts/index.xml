<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Yusank`s Site</title><link>https://yusank.github.io/posts/</link><description>所有文章 | Yusank`s Site</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yusankuban@gmail.com (Yusank)</managingEditor><webMaster>yusankuban@gmail.com (Yusank)</webMaster><lastBuildDate>Fri, 01 Apr 2022 10:10:00 +0800</lastBuildDate><atom:link href="https://yusank.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>[GoIM] 实现异步并发 worker 队列</title><link>https://yusank.github.io/posts/goim-worker-pool/</link><pubDate>Fri, 01 Apr 2022 10:10:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/goim-worker-pool/</guid><description><![CDATA[<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>转载<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong>原文链接： <a href="https://yusank.github.io/goim/posts/worker_pool" target="_blank" rel="noopener noreffer">实现异步并发 worker 队列</a></strong></div>
        </div>
    </div>
<p>在开发 broadcast 功能的时候，碰到一个比较棘手的问题，需要并发执行多个 worker 来讲 broadcast 消息推送到所有在线用户，同时我希望能控制并发数量。</p>]]></description></item><item><title>Golang 开发 mac app</title><link>https://yusank.github.io/posts/macapp-by-go/</link><pubDate>Wed, 23 Mar 2022 10:10:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/macapp-by-go/</guid><description><![CDATA[<blockquote>
<p>最近意外发现一个文章，说是可以通过 go 语言控制 <code>object-c</code>，从而实现用 go 语言开发出简单的 <code>mac app</code>。我就是试着尝试一下的想法去把文章里说的 repo 下载下来本地运行了一下里面的示例，居然<strong>运行成功</strong>了。很意外也很惊喜，作为一个后端开发者，用后端语言写出简单的客户端页面简直就是开启了一个新时代的大门一样，以后可以制作一些简单的 mac app，满足自己的需求了（久坐提醒、定时器之类的，一时半会儿想不到太多）。本篇文章讲述如何开发、部署以及需要注意的问题。</p>
</blockquote>]]></description></item><item><title>Docker 环境部署 RocketMQ</title><link>https://yusank.github.io/posts/rocketmq-deploy/</link><pubDate>Mon, 14 Mar 2022 10:10:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/rocketmq-deploy/</guid><description><![CDATA[<blockquote>
<p>最近在某个项目中需要引入<code>RocketMQ</code>来处理一些业务逻辑，然后由于还没上线，需要本地搭建开发环境，由于第一次接触 <code>RocketMQ</code> 所以在部署的过程有些曲折，通过这篇文章记录部署过程和遇到的一些问题，希望对看到的读者有所帮助。</p>
</blockquote>]]></description></item><item><title>Go 语言实现读取 pdf 文件内容</title><link>https://yusank.github.io/posts/pdf-reader/</link><pubDate>Fri, 04 Mar 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/pdf-reader/</guid><description>&lt;blockquote>
&lt;p>本篇介绍一个如何在 go 语言环境下，如何解析/读取 pdf 文件内容从而进行一些业务逻辑。本篇将会介绍两种方案，可以按自己的需求进行对比和最终选择。&lt;/p>
&lt;/blockquote></description></item><item><title>Go 语言实现连接池</title><link>https://yusank.github.io/posts/conn-pool/</link><pubDate>Tue, 22 Feb 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/conn-pool/</guid><description>&lt;blockquote>
&lt;p>本篇介绍一个用 go 实现的连接池，针对连接的生命周期的管理十分有帮助。本篇从连接池的设计到实现以及常用场景进行详解。&lt;/p>
&lt;/blockquote></description></item><item><title>Go 项目开发和维护经验之谈</title><link>https://yusank.github.io/posts/go-project-experience/</link><pubDate>Mon, 24 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/go-project-experience/</guid><description><![CDATA[<blockquote>
<p>我想将自己的开发项目的经历以及过程中总结的经验或者一些小技巧整理出来，供自己和看到这篇文章的同学一个参考。内容包括但不限于，项目目录结构，模块拆分，单元测试，<code>e2e</code> 测试，<code>git</code> 的使用技巧，<code>GitHub</code> 的 <code>actionflow</code> 的使用技巧等。</p>
</blockquote>]]></description></item><item><title>HPA controller 源码解读</title><link>https://yusank.github.io/posts/hpa-controller/</link><pubDate>Thu, 20 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/hpa-controller/</guid><description><![CDATA[<blockquote>
<p>本篇讲述 <code>kubernetes</code> 的横向 pod 伸缩(HorizontalPodAutoscaler) 控制器的数据结构，逻辑处理，metrics 计算以及相关细节的源码解读。</p>
</blockquote>]]></description></item><item><title>go 语言中的分片 map 的实现</title><link>https://yusank.github.io/posts/shard-map/</link><pubDate>Thu, 13 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/shard-map/</guid><description><![CDATA[<blockquote>
<p>本篇分享一个分片式的 map 结构，在一些场景下该结构比原生 <code>syncMap</code> 更有优势，本文会对该结构的实现，原理以及时候的场景进行详细的介绍。</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·有序集合篇</title><link>https://yusank.github.io/posts/redis-server-zset/</link><pubDate>Fri, 07 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redis-server-zset/</guid><description><![CDATA[<blockquote>
<p>本篇讲述 <code>Redis</code> 中的基础数据结构 <code>ZSet</code>(<code>SortedSet</code>) 的底层实现原理和如何通过 go 语言实现一个 <code>ZSet</code> 的过程以及需要注意的问题。</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·链表篇</title><link>https://yusank.github.io/posts/redeis-server-list/</link><pubDate>Fri, 24 Dec 2021 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redeis-server-list/</guid><description><![CDATA[<blockquote>
<p>本篇讲述 <code>Redis</code> 中的基础数据结构 <code>List</code> 的底层实现原理和如何通过 go 语言实现一个 <code>List</code> 的过程以及需要注意的问题。</p>
</blockquote>]]></description></item></channel></rss>