<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Yusank`s Site</title><link>https://yusank.github.io/</link><description>这是我的个人博客，我会在这里分享学习和成长过程中的积累和经验.</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yusankuban@gmail.com (Yusank)</managingEditor><webMaster>yusankuban@gmail.com (Yusank)</webMaster><lastBuildDate>Thu, 13 Jan 2022 10:50:00 +0800</lastBuildDate><atom:link href="https://yusank.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>go 语言中的分片 map 的实现</title><link>https://yusank.github.io/posts/shard-map/</link><pubDate>Thu, 13 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/shard-map/</guid><description><![CDATA[<blockquote>
<p>本篇分享一个分片式的 map 结构，在一些场景下该结构比原生 <code>syncMap</code> 更有优势，本文会对该结构的实现，原理以及时候的场景进行详细的介绍。</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·有序集合篇</title><link>https://yusank.github.io/posts/redis-server-zset/</link><pubDate>Fri, 07 Jan 2022 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redis-server-zset/</guid><description><![CDATA[<blockquote>
<p>本篇讲述 <code>Redis</code> 中的基础数据结构 <code>ZSet</code>(<code>SortedSet</code>) 的底层实现原理和如何通过 go 语言实现一个 <code>ZSet</code> 的过程以及需要注意的问题。</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·链表篇</title><link>https://yusank.github.io/posts/redeis-server-list/</link><pubDate>Fri, 24 Dec 2021 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redeis-server-list/</guid><description><![CDATA[<blockquote>
<p>本篇讲述 <code>Redis</code> 中的基础数据结构 <code>List</code> 的底层实现原理和如何通过 go 语言实现一个 <code>List</code> 的过程以及需要注意的问题。</p>
</blockquote>]]></description></item><item><title>Go 泛型提前尝试</title><link>https://yusank.github.io/posts/go-generic/</link><pubDate>Thu, 09 Dec 2021 10:40:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/go-generic/</guid><description><![CDATA[<blockquote>
<p><code>Go</code> 已经确实在 <code>1.18</code> 版本支持泛型了，预计 2022 年 2 月份发布 1.18 正式版，到目前为止泛型相关规范已确定且可以在开发分支的 go 版本中尝试使用了，这篇文章带你领略 <code>go</code> 的泛型.</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·服务管理篇</title><link>https://yusank.github.io/posts/redis-server-network/</link><pubDate>Mon, 06 Dec 2021 10:00:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redis-server-network/</guid><description><![CDATA[<blockquote>
<p>这一篇主要是将如何定义一个比较完善的服务入口以及如何管理服务的生命周期、如何处理 <code>tcp</code> 的连接管理和请求处理等相关内容。</p>
</blockquote>]]></description></item><item><title>好用且实用的写文章技巧</title><link>https://yusank.github.io/posts/blog_example/</link><pubDate>Tue, 23 Nov 2021 10:10:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/blog_example/</guid><description><![CDATA[<blockquote>
<p>这里我会记录一些 <code>Markdown</code> 和 <code>Shortcut</code> 的使用技巧以及常用的模块，方便后期写文章时查看和使用。</p>
</blockquote>]]></description></item><item><title>[系列]Redis Server 实现·协议篇</title><link>https://yusank.github.io/posts/redis-server-protocol/</link><pubDate>Tue, 23 Nov 2021 10:00:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redis-server-protocol/</guid><description><![CDATA[<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本文章为该系列的<code>协议篇</code>，如果需要阅读其他相关文章， 请点击<a href="https://yusank.github.io/posts/redeis-server-introduction/" target="_blank" rel="noopener noreffer">这里</a>跳转查看</div>
        </div>
    </div>]]></description></item><item><title>[系列]Redis Server 实现·前言</title><link>https://yusank.github.io/posts/redeis-server-introduction/</link><pubDate>Mon, 22 Nov 2021 10:50:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/redeis-server-introduction/</guid><description><![CDATA[<blockquote>
<p>本文系列篇<code>Redis Server 实现</code>的开篇文章，将列出本系列篇讲述的内容和实现的功能做简单的描述。</p>
</blockquote>]]></description></item><item><title>apisix 开发自定义插件</title><link>https://yusank.github.io/posts/apisix_plugins/</link><pubDate>Wed, 03 Nov 2021 12:20:00 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/apisix_plugins/</guid><description>分享如何在 docker 环境部署 apisix 和如何开发 lua 和 go 语言的插件以及如何使用这些自定义插件的过程</description></item><item><title>nginx 中使用 lua 动态加载服务配置</title><link>https://yusank.github.io/posts/nginx-lua-plugins/</link><pubDate>Fri, 17 Sep 2021 12:22:33 +0800</pubDate><author>作者</author><guid>https://yusank.github.io/posts/nginx-lua-plugins/</guid><description>本文简单介绍如何通过 lua 脚本和 ngx_shared_dict 在 nginx 中动态加载后端服务配置以及动态更新服务配置. nginx</description></item></channel></rss>